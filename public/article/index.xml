<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Articles on Hai-Liang &#34;Hal&#34; Wang</title>
    <link>http://h12.io/article/</link>
    <description>Recent content in Articles on Hai-Liang &#34;Hal&#34; Wang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Copyright (c) 2012-2018, Hǎi-Liàng &#34;Hal&#34; Wáng; all rights reserved.</copyright>
    <lastBuildDate>Tue, 22 Feb 2022 14:46:35 +0000</lastBuildDate>
    
	<atom:link href="http://h12.io/article/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go Pattern: Runner</title>
      <link>http://h12.io/article/go-pattern-runner/</link>
      <pubDate>Tue, 22 Feb 2022 14:46:35 +0000</pubDate>
      
      <guid>http://h12.io/article/go-pattern-runner/</guid>
      <description>Again and again, a concurrent pattern emerges from the need to control goroutine lifecycles and handle their errors, and I call it the &amp;ldquo;Runner Pattern&amp;rdquo;.
The runner interface The pattern is as simple as a single-method interface:
// Runner defines the Run method to be executed within a goroutine type Runner interface { Run(ctx context.Context) error }  The Run method will block until one of the following occurs:</description>
    </item>
    
    <item>
      <title>Go Anti-pattern: Parent Closer</title>
      <link>http://h12.io/article/go-anti-patterns-parent-closer/</link>
      <pubDate>Fri, 08 Jan 2021 10:48:26 +0000</pubDate>
      
      <guid>http://h12.io/article/go-anti-patterns-parent-closer/</guid>
      <description>Imagine you need to wrap multiple objects which implements io.Closer, e.g. three clients to fetch and combine data from different endpoints.
type Parent struct { child1 Child1 child2 Child2 child3 Child3 }  Parent closer Let&amp;rsquo;s see how we can create and destroy a parent object.
func NewParent() (*Parent, error) { child1, err := NewChild1() if err != nil { return nil, err } child2, err := NewChild1() if err !</description>
    </item>
    
    <item>
      <title>Probability as a Generalisation of Boolean Algebra</title>
      <link>http://h12.io/article/probability-as-a-generalisation-of-boolean-algebra/</link>
      <pubDate>Mon, 14 Dec 2020 10:46:33 +0000</pubDate>
      
      <guid>http://h12.io/article/probability-as-a-generalisation-of-boolean-algebra/</guid>
      <description>A summary of Boolean algebra Given the following notations:
 a proposition is denoted as a lowercase letter, e.g. $p$, $q$ the truth value of a proposition $p$ is denoted as $ B(p) \in \set{0, 1} $, where $B(p)=1$ if $p$ is true or $B(p)=0$ if $p$ is false  Negation (not, $¬$), conjunction (and, $∧$) and disjunction (or, $∨$) are defined by the truth tables below:
   $B(p)$ $B(¬p)$     0 1   1 0</description>
    </item>
    
    <item>
      <title>Go Pattern: Context-aware Lock</title>
      <link>http://h12.io/article/go-pattern-context-aware-lock/</link>
      <pubDate>Mon, 30 Nov 2020 17:45:31 +0000</pubDate>
      
      <guid>http://h12.io/article/go-pattern-context-aware-lock/</guid>
      <description>We often use Mutex or RWMutex as locks in Go, but sometimes we need a lock that can be cancelled by a context during the lock attempt.
The pattern is simple - we use a channel with length 1:
lockChan := make(chan struct{}, 1) lockChan &amp;lt;- struct{}{} // lock &amp;lt;- lockChan // unlock  When multiple goroutines try to obtain the lock, only one of them is able to fill into the only slot, and the rest are blocked until the slot is empty again after a readout.</description>
    </item>
    
    <item>
      <title>Go Pattern: Buffered Writer</title>
      <link>http://h12.io/article/go-pattern-buffered-writer/</link>
      <pubDate>Sun, 22 Nov 2020 17:38:34 +0000</pubDate>
      
      <guid>http://h12.io/article/go-pattern-buffered-writer/</guid>
      <description>A buffered writer is so ubiquitous that we do not usually consider it as a pattern, but sometimes we reinvent it or even do it in an inferior way. Let us look at a real use case first.
Batch processor What would you do to improve the throughput of a service? The answer is short: batching.
By processing and sending in a batch of multiple items instead of a single item at a time, you are amortizing the network overhead from the request-response round trip among all the items in the batch.</description>
    </item>
    
    <item>
      <title>Value vs Pointer Receivers</title>
      <link>http://h12.io/article/value-vs-pointer-receivers/</link>
      <pubDate>Fri, 19 Jun 2020 13:58:46 +0100</pubDate>
      
      <guid>http://h12.io/article/value-vs-pointer-receivers/</guid>
      <description>Should I use value receivers or pointer receivers?
Value receivers have some benefits include immutability, concurrent safety and clean logic (not always, often true). But to what extend can I use value receivers without an issue or performance penalty?
In the Go FAQ, there are 3 rules:
 most important, does the method need to modify the receiver? If it does, the receiver must be a pointer if the receiver is large, a big struct for instance, it will be much cheaper to use a pointer receiver if some of the methods of the type must have pointer receivers, the rest should too, so the method set is consistent regardless of how the type is used  Let&amp;rsquo;s look at rule 1.</description>
    </item>
    
    <item>
      <title>A Developer&#39;s Guide to Password Management</title>
      <link>http://h12.io/article/password-management/</link>
      <pubDate>Wed, 18 Feb 2015 17:23:24 +0000</pubDate>
      
      <guid>http://h12.io/article/password-management/</guid>
      <description>This article is intended to be a comprehensive recipe to password management, assuming:
 You are a developer You have to manage dozens of passwords, ssh key pairs and possibly some secret documents You want strong security on each of them You do not want to forget any of them but do not either want to spend too much time memorizing them You want to access your passwords from both your computers and mobile devices  The proposed solution includes:</description>
    </item>
    
    <item>
      <title>A Brief Note on Scientific Web Surfing</title>
      <link>http://h12.io/article/scientific-web-surfing/</link>
      <pubDate>Sat, 14 Feb 2015 09:30:55 +0000</pubDate>
      
      <guid>http://h12.io/article/scientific-web-surfing/</guid>
      <description>Knowledge is power. Information is liberating. &amp;mdash; by Kofi Annan.
VPS  CloudsVM Vultr DigitalOcean BandwagonHOST  Client Area -&amp;gt; Services -&amp;gt; Order New Services 64MB RAM is enough for running both ShadowSocks and pdnsd Install Ubuntu LTS 32bit (x86, i686) or CentOS 7.   CentOS Install CentOS 7 (64bit) Shadowsocks cd /etc/yum.repos.d/ wget https://copr.fedorainfracloud.org/coprs/librehat/shadowsocks/repo/epel-7/librehat-shadowsocks-epel-7.repo yum update yum install shadowsocks-libev cd /etc/shadowsocks-libev/ vim config.json # server should be 0.</description>
    </item>
    
    <item>
      <title>Learning Haskell the Hard Way</title>
      <link>http://h12.io/article/learn-haskell/</link>
      <pubDate>Sat, 26 Jul 2014 08:12:39 +0000</pubDate>
      
      <guid>http://h12.io/article/learn-haskell/</guid>
      <description>When I was reading the collection of learning resources on Haskell and tried to find a good start, I quickly realized that none of the books or tutorials are suitable for me: the easier a tutorial claims to be, the harder to really understand Haskell by reading it. What I need is a terse documentation that introduces the syntax and semantics of Haskell systematically and clearly, but unfortunately none was found.</description>
    </item>
    
    <item>
      <title>How to Achieve a Perfect PageSpeed Insights Score</title>
      <link>http://h12.io/article/pagespeed-insights/</link>
      <pubDate>Thu, 24 Jul 2014 03:42:01 +0000</pubDate>
      
      <guid>http://h12.io/article/pagespeed-insights/</guid>
      <description>Indtroduction PageSpeed Insights is an online tool by Google to measure the performance of an web page for mobile and desktop devices. It has a set of heuristic rules considering the network-independent aspects of page performance. Each rule has a weight and the total score ranges from 0 to 100 points. The desktop and mobile tests have the same set of rules for performance and mobile test has some extra rules about user experience.</description>
    </item>
    
    <item>
      <title>Finding Optimal Typographic Scale</title>
      <link>http://h12.io/article/optimal-font-scale/</link>
      <pubDate>Sat, 05 Jul 2014 15:03:04 +0000</pubDate>
      
      <guid>http://h12.io/article/optimal-font-scale/</guid>
      <description>During the construction of this site, there are many important design decisions that need to be made. One of them is to decide the font size for each level of headings, i.e., typographic scale.
Investigation The first thing I did was to read everything online about typographic scale. I will just skip the details and jump to my opinions:
 Modular scale should be followed Traditional scale is obsolete Golden ratio or double-stranded scale do not make any sense Vertical rhythm should be considered  Then a little explanation.</description>
    </item>
    
  </channel>
</rss>