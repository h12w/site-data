<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on Hai-Liang &#34;Hal&#34; Wang</title>
    <link>http://h12.io/tags/go/</link>
    <description>Recent content in Go on Hai-Liang &#34;Hal&#34; Wang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Copyright (c) 2012-2018, Hǎi-Liàng &#34;Hal&#34; Wáng; all rights reserved.</copyright>
    <lastBuildDate>Thu, 12 May 2022 21:24:39 +0100</lastBuildDate>
    
	<atom:link href="http://h12.io/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Less Is More: Directed Acyclic Graph</title>
      <link>http://h12.io/note/less-is-more-dag/</link>
      <pubDate>Thu, 12 May 2022 21:24:39 +0100</pubDate>
      
      <guid>http://h12.io/note/less-is-more-dag/</guid>
      <description>A directed acyclic graph or DAG is a directed graph with no directed cycles.
An arbitrary directed graph may also be transformed into a DAG, called its condensation, by contracting each of its strongly connected components into a single super vertex.
Go&amp;rsquo;s import declaration declares a dependency relation between the importing and imported package. It is illegal for a package to import itself, directly or indirectly, or to directly import a package without referring to any of its exported identifiers.</description>
    </item>
    
    <item>
      <title>Go Pattern: Runner</title>
      <link>http://h12.io/article/go-pattern-runner/</link>
      <pubDate>Tue, 22 Feb 2022 14:46:35 +0000</pubDate>
      
      <guid>http://h12.io/article/go-pattern-runner/</guid>
      <description>Again and again, a concurrent pattern emerges from the need to control goroutine lifecycles and handle their errors, and I call it the &amp;ldquo;Runner Pattern&amp;rdquo;.
The runner interface and its contract The pattern is as simple as a single-method interface:
// Runner defines the Run method to be executed within a goroutine type Runner interface { Run(ctx context.Context) error }  The contract of the interface covers two aspects.</description>
    </item>
    
    <item>
      <title>Go Anti-pattern: Parent Closer</title>
      <link>http://h12.io/article/go-anti-patterns-parent-closer/</link>
      <pubDate>Fri, 08 Jan 2021 10:48:26 +0000</pubDate>
      
      <guid>http://h12.io/article/go-anti-patterns-parent-closer/</guid>
      <description>Imagine you need to wrap multiple objects which implements io.Closer, e.g. three clients to fetch and combine data from different endpoints.
type Parent struct { child1 Child1 child2 Child2 child3 Child3 }  Parent closer Let&amp;rsquo;s see how we can create and destroy a parent object.
func NewParent() (*Parent, error) { child1, err := NewChild1() if err != nil { return nil, err } child2, err := NewChild1() if err !</description>
    </item>
    
    <item>
      <title>Go Pattern: Context-aware Lock</title>
      <link>http://h12.io/article/go-pattern-context-aware-lock/</link>
      <pubDate>Mon, 30 Nov 2020 17:45:31 +0000</pubDate>
      
      <guid>http://h12.io/article/go-pattern-context-aware-lock/</guid>
      <description>We often use Mutex or RWMutex as locks in Go, but sometimes we need a lock that can be cancelled by a context during the lock attempt.
The pattern is simple - we use a channel with length 1:
lockChan := make(chan struct{}, 1) lockChan &amp;lt;- struct{}{} // lock &amp;lt;- lockChan // unlock  When multiple goroutines try to obtain the lock, only one of them is able to fill into the only slot, and the rest are blocked until the slot is empty again after a readout.</description>
    </item>
    
    <item>
      <title>Go Pattern: Buffered Writer</title>
      <link>http://h12.io/article/go-pattern-buffered-writer/</link>
      <pubDate>Sun, 22 Nov 2020 17:38:34 +0000</pubDate>
      
      <guid>http://h12.io/article/go-pattern-buffered-writer/</guid>
      <description>A buffered writer is so ubiquitous that we do not usually consider it as a pattern, but sometimes we reinvent it or even do it in an inferior way. Let us look at a real use case first.
Batch processor What would you do to improve the throughput of a service? The answer is short: batching.
By processing and sending in a batch of multiple items instead of a single item at a time, you are amortizing the network overhead from the request-response round trip among all the items in the batch.</description>
    </item>
    
    <item>
      <title>Value vs Pointer Receivers</title>
      <link>http://h12.io/article/value-vs-pointer-receivers/</link>
      <pubDate>Fri, 19 Jun 2020 13:58:46 +0100</pubDate>
      
      <guid>http://h12.io/article/value-vs-pointer-receivers/</guid>
      <description>Should I use value receivers or pointer receivers?
Value receivers have some benefits include immutability, concurrent safety and clean logic (not always, often true). But to what extend can I use value receivers without an issue or performance penalty?
In the Go FAQ, there are 3 rules:
 most important, does the method need to modify the receiver? If it does, the receiver must be a pointer if the receiver is large, a big struct for instance, it will be much cheaper to use a pointer receiver if some of the methods of the type must have pointer receivers, the rest should too, so the method set is consistent regardless of how the type is used  Let&amp;rsquo;s look at rule 1.</description>
    </item>
    
    <item>
      <title>Go vs Python</title>
      <link>http://h12.io/note/go-vs-python/</link>
      <pubDate>Fri, 27 Sep 2019 13:58:41 +0100</pubDate>
      
      <guid>http://h12.io/note/go-vs-python/</guid>
      <description>Slices Go slice and Python slice have very similar syntax, but Python slice is a shallow copy of part of the original list, while Go slice is just a new range within the same underlying array of the original slice.
Let&amp;rsquo;s try:
a = [1, 2, 3] b = a[:2] b[0] = 9 print(a) print(b) # output: # [1, 2, 3] # [9, 2]  See a[0] remains the same.</description>
    </item>
    
    <item>
      <title>JavaScript Surprises to a Go Developer</title>
      <link>http://h12.io/note/js-surprises/</link>
      <pubDate>Tue, 12 Feb 2019 11:32:07 +0000</pubDate>
      
      <guid>http://h12.io/note/js-surprises/</guid>
      <description>The scope of var is wrong Never use var to declare variables, use let instead.
REF
== is conversion and comparison What you really need is ===, which is similar to comparing two interface{}.
=== is shallow {a:1}==={a:1} is false, while Go struct with string are compared by contents (but not for slice).
Also this affects map key comparison. So object key is not so useful in JS as struct key in Go.</description>
    </item>
    
  </channel>
</rss>