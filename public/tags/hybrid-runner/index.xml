<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hybrid Runner on @h12</title>
    <link>http://h12.io/tags/hybrid-runner/</link>
    <description>Recent content in Hybrid Runner on @h12</description>
    <generator>Hugo -- 0.145.0</generator>
    <language>en-us</language>
    <copyright>2012-2025, Hǎi-Liàng &amp;ldquo;Hal&amp;rdquo; Wáng.</copyright>
    <lastBuildDate>Sat, 22 Apr 2023 17:50:04 +0100</lastBuildDate>
    <atom:link href="http://h12.io/tags/hybrid-runner/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go Pattern: Hybrid Handler</title>
      <link>http://h12.io/article/go-pattern-hybrid-handler/</link>
      <pubDate>Sat, 22 Apr 2023 17:50:04 +0100</pubDate>
      <guid>http://h12.io/article/go-pattern-hybrid-handler/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;In today&amp;rsquo;s high-performance and concurrent computing environments, effectively processing a stream of messages using a mix of purely computational functions and remote procedure calls has become a significant challenge. The Go programming language is designed to handle concurrency well, but when it comes to managing a hybrid load, even Go can struggle to achieve optimal CPU utilization. In this article, we will discuss the Hybrid Handler pattern, an efficient and unified approach to address this challenge.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
