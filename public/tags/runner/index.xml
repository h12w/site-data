<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Runner on Hai-Liang &#34;Hal&#34; Wang</title>
    <link>http://h12.io/tags/runner/</link>
    <description>Recent content in Runner on Hai-Liang &#34;Hal&#34; Wang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Copyright (c) 2012-2018, Hǎi-Liàng &#34;Hal&#34; Wáng; all rights reserved.</copyright>
    <lastBuildDate>Tue, 22 Feb 2022 14:46:35 +0000</lastBuildDate>
    
	<atom:link href="http://h12.io/tags/runner/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go Pattern: Runner</title>
      <link>http://h12.io/article/go-pattern-runner/</link>
      <pubDate>Tue, 22 Feb 2022 14:46:35 +0000</pubDate>
      
      <guid>http://h12.io/article/go-pattern-runner/</guid>
      <description>Again and again, a concurrent pattern emerges from the need to control goroutine lifecycles and handle their errors, and I call it the &amp;ldquo;Runner Pattern&amp;rdquo;.
The runner interface and its contract The pattern is as simple as a single-method interface:
// Runner defines the Run method to be executed within a goroutine type Runner interface { Run(ctx context.Context) error }  The contract of the interface covers two aspects.</description>
    </item>
    
  </channel>
</rss>